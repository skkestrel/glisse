#include "../src/data.h"
#include "../src/util.h"

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#include "../src/cxxopts.h"
#pragma GCC diagnostic pop

#include <iostream>
#include <string>
#include <fstream>
#include <sstream>

int main(int argc, char** argv)
{
	cxxopts::Options options("prune-track", "Prune large track files generated by simulations");
	options.add_options()
		("i,input", "Input file or directory", cxxopts::value<std::string>())
		("o,output", "Output file or directory (with -s)", cxxopts::value<std::string>())
		("s,split-output", "Split output every n bytes", cxxopts::value<uint64_t>())
		("P,no-planets", "Throw away planets")
		("w,watch-particles", "Watch particles (comma separated list)", cxxopts::value<std::string>());

	options.parse_positional({ "input", "output" });

	try
	{
		auto result = options.parse(argc, argv);

		if (result.count("i") == 0)
		{
			throw cxxopts::OptionException("Required argument -i");
		}
		if (result.count("o") == 0)
		{
			throw cxxopts::OptionException("Required argument -o");
		}

		std::vector<uint32_t> particles;
		bool takeallparticles = false;
		if (result.count("w") > 0)
		{
			if (result["w"].as<std::string>() == "")
			{
				takeallparticles = true;
			}
			else
			{
				std::istringstream ss(result["w"].as<std::string>());
				std::string token;

				while (std::getline(ss, token, ','))
				{
					particles.push_back(static_cast<uint32_t>(std::stoul(token)));
				}
			}
		}

		std::sort(particles.begin(), particles.end());

		uint64_t splitbytes = 0;
		if (result.count("s") > 0)
		{
			splitbytes = result["s"].as<uint64_t>();
		}

		bool killplanets = false;
		if (result.count("P") > 0)
		{
			killplanets = true;
		}

		std::string inpath = result["i"].as<std::string>();
		std::string outpath = result["o"].as<std::string>();

		if (splitbytes > 0 && !sr::util::is_dir_empty(outpath))
		{
			std::cout << "Output folder is not empty! Do you want to continue?" << std::endl;
			std::cout << "Type \"Yes\" exactly as shown to continue: ";
		
			std::string s;
			std::getline(std::cin, s);

			if (s != "Yes") return -1;
		}

		std::ostringstream ss;

		if (splitbytes > 0)
		{
			sr::util::make_dir(outpath);

			ss << outpath;
			if (outpath[outpath.size() - 1] != '/') ss << '/';
			ss << "track.0.out";
		}
		else
		{
			ss << outpath;
		}

		size_t outnum = 1;
		std::ofstream outfile(ss.str(), std::ios_base::binary);

		sr::data::read_tracks(inpath, takeallparticles, particles, killplanets,
			[&](sr::data::HostPlanetSnapshot& pl, sr::data::HostParticleSnapshot& pa, double time)
			{
				if (killplanets)
				{
					pl.n_alive = pl.n = 1;
				}

				sr::data::save_binary_track(outfile, pl, pa, time, false);
				if (splitbytes != 0 && outfile.tellp() > static_cast<int>(splitbytes))
				{
					ss = std::ostringstream();

					ss << outpath;
					if (outpath[outpath.size() - 1] != '/') ss << '/';
					ss << "track." << outnum++ << ".out";

					outfile = std::ofstream(ss.str(), std::ios_base::binary);
				}
			});
	}
	catch (cxxopts::OptionException& e)
	{
		std::cout << e.what() << std::endl;
		std::cout << options.help() << std::endl;
		return -1;
	}

	return 0;
}
